# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: windows-latest

variables:
  # the name of the service connection that you created above
  serviceConnectionToAzure: RaviARMConnection
  # the name of your web app here is the same one you used above
  # when you created the web app using the Azure CLI
  appName: TestSampleFuncApp
  # the name of your functionApp is what you provided as
  # stagingDirectory in pom.xml
  functionAppName: 'Ravi-TestAzRepo'

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
  
- task: CopyFiles@2
  displayName: Copy Files
  inputs:
    SourceFolder: $(system.defaultworkingdirectory)/target/azure-functions/TestSampleFuncApp/
    Contents: '**'
    TargetFolder: $(build.artifactstagingdirectory)

- task: CopyFiles@2
  inputs:
    SourceFolder: 'Terraform'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/DropTerraform'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: $(build.artifactstagingdirectory)   

- task: AzureFunctionApp@1
  inputs:
    azureSubscription: 'RaviARMConnection'
    appType: 'functionApp'
    appName: 'TestSampleFuncApp'
    package: '$(System.DefaultWorkingDirectory)/_Ravikiran-Yenduva.Ravi-TestAzRepo/drop/TestSampleFuncApp-1.0-SNAPSHOT.jar'
    deploymentMethod: 'zipDeploy'
    
#- task: AzureFunctionApp@1
#  inputs:
#    azureSubscription: RaviARMConnection
#    appType: functionApp
#    appName: $(appName)
#    package: $(System.DefaultWorkingDirectory)/_Ravikiran-Yenduva.Ravi-TestAzRepo/drop/*.zip
    





