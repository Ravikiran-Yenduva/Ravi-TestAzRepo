# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: windows-latest

variables:
  # the name of the service connection that you created above
  serviceConnectionToAzure: RaviARMConnection
  # the name of your web app here is the same one you used above
  # when you created the web app using the Azure CLI
  appName: Ravi-TestAzRepo
  # the name of your functionApp is what you provided as
  # stagingDirectory in pom.xml
  functionAppName: 'Ravi-TestAzRepo'

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
  
- task: CopyFiles@2
  inputs:
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

###
#- task: AzureFunctionApp@1
  #displayName: Azure Function App deploy
  #inputs:
    #azureSubscription: $(serviceConnectionToAzure)
    #appType: functionApp
    #appName: $(appName)
    #package: $(build.artifactstagingdirectory)/$(appName)

####
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'RaviARMConnection'
    appType: 'functionApp'
    WebAppName: 'test-ravi-func111'
    packageForLinux: '$(Build.ArtifactStagingDirectory)/**/*.zip'
